{"version":3,"sources":["components/todoinput.js","components/todo.js","components/todolist.js","App.js","index.js"],"names":["ToDoInput","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","onSubmit","preventDefault","id","Math","floor","random","text","className","placeholder","type","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","ToDoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA0DeA,EAxDC,SAACC,GAAU,IAAD,EACIC,mBAASD,EAAME,KAAKF,EAAME,KAAKC,MAAM,IADzC,mBACfC,EADe,KACRC,EADQ,KAGhBC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAACC,GAClBP,EAASO,EAAEC,OAAOV,QAYtB,OACI,sBAAMW,SAXW,SAACF,GAClBA,EAAEG,iBAEFf,EAAMc,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMhB,IAEVC,EAAS,KAIqBgB,UAAU,YAAxC,SACKrB,EAAME,KACH,qCACA,uBACAoB,YAAY,mBACZC,KAAK,OACLpB,MAAOC,EACPoB,KAAK,OACLH,UAAU,kBACVI,SAAUd,EACVe,IAAKpB,IAED,wBAAQe,UAAU,mBAAlB,4BAIA,qCACA,uBACAC,YAAY,uBACZC,KAAK,OACLpB,MAAOC,EACPoB,KAAK,OACLH,UAAU,aACVI,SAAUd,EACVe,IAAKpB,IAEL,wBAAQe,UAAU,cAAlB,4B,eCFLM,EA5CJ,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAAMC,EAAuC,EAAvCA,aAAaC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,WAAe,EAC9B9B,mBAAS,CAC7Be,GAAI,KACLb,MAAM,KAH6C,mBAC/CD,EAD+C,KACzC8B,EADyC,KActD,OAAI9B,EAAKc,GACE,cAAC,EAAD,CAAWd,KAAMA,EAAMY,SATb,SAACX,GAClB4B,EAAW7B,EAAKc,GAAIb,GACpB6B,EAAQ,CACJhB,GAAI,KACJb,MAAM,QAQPyB,EAAMK,KAAI,SAACC,EAAMC,GACpB,OACI,sBAAKd,UAAWa,EAAKE,WAAa,oBAAsB,WAAxD,UAGI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKlB,KAApD,SACKkB,EAAKd,MADAc,EAAKlB,IAIf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACIgB,QAAS,kBACLP,EAAWI,EAAKlB,KACpBK,UAAU,gBAEd,cAAC,IAAD,CACIgB,QAAS,kBACLL,EAAQ,CAAChB,GAAGkB,EAAKlB,GAAGb,MAAM+B,EAAKd,QACnCC,UAAU,mBAfbc,OCyBNG,MA/Cf,WAAqB,IAAD,EACUrC,mBAAS,IADnB,mBACT2B,EADS,KACFW,EADE,KAkChB,OACI,gCACI,cAAC,EAAD,CAAWzB,SAjCH,SAACoB,GACb,GAAKA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAApC,CAIA,IAAMqB,EAAQ,CAAIP,GAAJ,mBAAYN,IAC1BW,EAASE,OA4BL,cAAC,EAAD,CACIb,MAAOA,EACPC,aAdS,SAACb,GAClB,IAAI0B,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKlB,KAAOA,IACZkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAQDZ,WApBO,SAAAd,GACf,IAAM2B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKlB,KAAOA,KACxDuB,EAASI,IAmBDZ,WA5BO,SAACc,EAAOC,GAClBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAG5CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAACe,GAAD,OAAWA,EAAKhC,KAAO6B,EAASC,EAAWE,eCT9DC,MATf,WACE,OACE,sBAAK5B,UAAU,WAAf,UACE,uEACA,cAAC,EAAD,QCFN6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1df71700.chunk.js","sourcesContent":["import React,{useState,useEffect,useRef} from 'react'\r\n\r\nconst ToDoInput=(props)=> {\r\n    const [input, setInput] = useState(props.edit?props.edit.value:'');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n        setInput('');\r\n    };\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"todo-form\">\r\n            {props.edit ? (\r\n                <>\r\n                <input\r\n                placeholder=\"update your task\"\r\n                type=\"text\"\r\n                value={input}\r\n                name=\"text\"\r\n                className=\"todo-input edit\"\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n            />\r\n                    <button className=\"todo-button edit\">Update Task</button>\r\n                </>\r\n            ) :\r\n                (\r\n                    <>\r\n                    <input\r\n                    placeholder=\"enter your task here\"\r\n                    type=\"text\"\r\n                    value={input}\r\n                    name=\"text\"\r\n                    className=\"todo-input\"\r\n                    onChange={handleChange}\r\n                    ref={inputRef}\r\n                    />\r\n                    <button className=\"todo-button\">Add Task</button>\r\n                    </>)\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ToDoInput\r\n","import React, { useState } from 'react'\r\nimport ToDoInput from './todoinput';\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nconst Todo=({todos,completeTodo,removeTodo,updateTodo})=> {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n       value:'' \r\n    })\r\n\r\n    const submitUpdate = (value) => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value:''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <ToDoInput edit={edit} onSubmit={submitUpdate}/>\r\n    }\r\n\r\n    return todos.map((todo, index) => {\r\n        return (\r\n            <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n                key={index}>\r\n\r\n                <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                    {todo.text}\r\n                </div>\r\n                \r\n                <div className=\"icons\">\r\n                    <RiCloseCircleLine\r\n                        onClick={()=>\r\n                            removeTodo(todo.id)}\r\n                        className='delete-icon'\r\n                     />\r\n                    <TiEdit\r\n                        onClick={()=>\r\n                            setEdit({id:todo.id,value:todo.text})}\r\n                        className='edit-icon'\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    })\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport ToDoInput from './todoinput';\r\nimport ToDo from './todo';\r\n\r\nfunction ToDoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = (todo) => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo,...todos];\r\n        setTodos(newTodos);\r\n        //console.log(newTodos);\r\n    }\r\n\r\n    const updateTodo = (todoId,newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map((item) => (item.id === todoId ? newValue : item)));\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = (id) => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n    return (\r\n        <div>\r\n            <ToDoInput onSubmit={addTodo} />\r\n            <ToDo\r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;\r\n","import './App.css';\nimport ToDoList from './components/todolist';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <h1> Hey There! what's the plan for today</h1>\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}